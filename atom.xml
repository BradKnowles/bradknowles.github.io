<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us"><generator uri="https://gohugo.io/" version="0.117.0">Hugo</generator><title type="html">Brad Knowles' Blog</title><link href="https://bradknowles.com/" rel="alternate" type="text/html" title="html"/><link href="https://bradknowles.com/atom.xml" rel="self" type="application/atom+xml" title="atom"/><updated>2023-08-27T23:36:28-04:00</updated><rights>This content Â© 2023 by Brad Knowles is licensed under Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International.</rights><author><name>Brad Knowles</name></author><id>https://bradknowles.com/</id><entry><title type="html">Claiming Your Git Identity with Commit Signatures</title><link href="https://bradknowles.com/blog/claiming-your-git-identity-with-commit-signatures/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://bradknowles.com/blog/claiming-your-git-identity-with-commit-signatures/</id><published>2023-08-27T00:00:00-04:00</published><updated>2023-08-27T00:00:00-04:00</updated><summary type="html"><![CDATA[<blockquote>It&rsquo;s extremely easy to falsify author information with Git and have it appear as if someone else made a given commit. This could lead to malicious code making its way into your repo with legit looking author info.  Using GnuPG (GPG) developers can sign, and others can verify, commits are truly from the right person.  Read on to find out how&hellip;</blockquote>It&rsquo;s extremely easy to falsify author information with Git and have it appear as if someone else made a given commit. This could lead to malicious code making its way into your repo with legit looking author info.  Using GnuPG (GPG) developers can sign, and others can verify, commits are truly from the right person.  Read on to find out how&hellip;]]></summary><content type="html"><![CDATA[<blockquote>It&rsquo;s extremely easy to falsify author information with Git and have it appear as if someone else made a given commit. This could lead to malicious code making its way into your repo with legit looking author info.  Using GnuPG (GPG) developers can sign, and others can verify, commits are truly from the right person.  Read on to find out how&hellip;</blockquote><h2 id="overview">Overview</h2>
<p>Do you know how easy it is for someone to pretend to be you when committing code using Git?</p>
<a class="lightgallery" href="/blog/claiming-your-git-identity-with-commit-signatures/real-fake-commits.png" title=" " data-thumbnail="/blog/claiming-your-git-identity-with-commit-signatures/real-fake-commits.png">
        <img
            class="lazyload"
            src="/svg/loading.min.svg"
            data-src="/blog/claiming-your-git-identity-with-commit-signatures/real-fake-commits.png"
            data-srcset="/blog/claiming-your-git-identity-with-commit-signatures/real-fake-commits.png, /blog/claiming-your-git-identity-with-commit-signatures/real-fake-commits.png 1.5x, /blog/claiming-your-git-identity-with-commit-signatures/real-fake-commits.png 2x"
            data-sizes="auto"
            alt="Two GitHub commits one committed by Brad Knowles, the other appears to be created by IntegerMan, but was in fact created by Brad." width="1005" height="187" />
    </a>
<p>I created both of these commits with some minor editing of the <code>.gitconfig</code> file.  Since I used the name and email of a friend of mine, thanks <span class="h-card person-mention"><a href="https://matteland.dev/" class="u-url url"><img class="u-photo photo" src="https://matteland.dev/img/ProfileMattE.94cd6573.png" alt="Matt Eland">&#8201;<span class="p-name fn">Matt Eland</span></a></span>, GitHub happily shows his picture and username, giving the appearance that he authored the commit.  He did not.</p>
<p>You should also notice the <code>Verified</code> tag next to my real commit.  It says:</p>
<blockquote>
<p>Brad created this commit and signed it with an OpenPGP signing key that only he controls. The email address on the signing key matches the one on this commit, it also matches an email address associated with his GitHub account, and matches the public key information also associated with his account.</p>
</blockquote>
<p>This is accomplished through GitHub&rsquo;s <a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification" target="_blank" rel="noopener noreffer ">commit signature verification</a> process; which uses Git&rsquo;s ability to <a href="https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work" target="_blank" rel="noopener noreffer ">sign your work</a> to &ldquo;verify that commits are actually from a trusted source.&rdquo;</p>
<p>If none of that makes any sense, don&rsquo;t worry; keep reading.  The aim of this post is to distill my many Internet searches, reading of blogs and documentation pages, and experimentation with various key configurations into a well-explained step-by-step guide on how you too can use commit signatures to claim your Git identity.</p>
<h2 id="terminology">Terminology</h2>
<p>Let&rsquo;s start by explaining the key terms.</p>
<table>
<thead>
<tr>
<th>Term</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>OpenPGP</td>
<td>OpenPGP is the encryption standard used when signing commits.</td>
</tr>
<tr>
<td>GNU Privacy Guard (GnuPG or GPG)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></td>
<td>The software tool using OpenPGP to perform the actual signing.</td>
</tr>
<tr>
<td>Digital Signature</td>
<td>A type of electronic signature that can be used to authenticate the person who signed a document.<br>A &ldquo;virtual fingerprint&rdquo;, and once a commit is signed with it, it becomes an embedded part of the commit.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></td>
</tr>
<tr>
<td>Private (Secret) Key</td>
<td>The secret half of a keypair. It is used to sign commits. Should <strong>NEVER</strong> be shared.</td>
</tr>
<tr>
<td>Public Key</td>
<td>The non-secret half of a keypair. Others use it to verify the signature of the commit. Should be shared freely.</td>
</tr>
<tr>
<td>Keypair</td>
<td>The combination of a private and a public key.</td>
</tr>
<tr>
<td>Certification Keypair</td>
<td>The keys responsible for managing all other keys belonging to that identity.</td>
</tr>
<tr>
<td>Signing Subkey</td>
<td>The keys responsible for signing commits.</td>
</tr>
</tbody>
</table>
<p>A little more on keypairs.  A <code>keypair</code> consists of both private and public keys and are always generated together. They be used to create other keys, for encrypting data, or for signing data.  A single keypair can perform one or more of those function, depending on the abilities it was granted at creation.</p>
<blockquote>
<p>GnuPG uses <strong>public-key</strong> cryptography so that users may communicate securely. In a public-key system, each user has a <strong>pair of keys [keypair]</strong> consisting of a <strong>private key</strong> and a <strong>public key</strong>. A user&rsquo;s <strong>private key</strong> is kept secret; it need never be revealed. The <strong>public key</strong> may be given to anyone with whom the user wants to communicate. GnuPG uses a somewhat more sophisticated scheme in which a user has a <strong>primary keypair</strong> and then zero or more additional <strong>subordinate keypairs</strong>.</p>
<p>&ndash; &ldquo;Getting Started.&rdquo; <cite><a href="https://www.gnupg.org/gph/en/manual/c14.html" target="_blank" rel="noopener noreffer ">The GNU Privacy Handbook</a></cite>, 1999.</p>
</blockquote>
<h2 id="environment-setup">Environment Setup</h2>
<h3 id="tool-installation">Tool Installation</h3>
<p>As I use Windows for my primary development machine, all of these instructions assume Windows and PowerShell 7+.</p>
<p>The two necessary tools are <code>gpg</code> and <code>git</code>.  You can download <code>git</code> from <a href="https://git-scm.com/" target="_blank" rel="noopener noreffer ">https://git-scm.com/</a>.</p>
<p>The Windows installer for <code>gpg</code> is a bit harder to find. Use the most recent installer from their <a href="https://www.gnupg.org/ftp/gcrypt/binary/" target="_blank" rel="noopener noreffer ">FTP site</a>.</p>
<p>If you&rsquo;re using alternative installation tools like <a href="https://scoop.sh/" target="_blank" rel="noopener noreffer ">Scoop</a> or <a href="https://community.chocolatey.org/" target="_blank" rel="noopener noreffer ">Chocolatey</a>, the tools can be installed with these commands:</p>
<h4 id="scoop">Scoop</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">scoop</span> <span class="n">install</span> <span class="n">git</span>
</span></span><span class="line"><span class="cl"><span class="n">scoop</span> <span class="n">bucket</span> <span class="n">add</span> <span class="n">nonportable</span>
</span></span><span class="line"><span class="cl"><span class="n">scoop</span> <span class="n">install</span> <span class="nb">gpg-np</span>
</span></span></code></pre></div><h4 id="chocolatey">Chocolatey</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">choco</span> <span class="n">install</span> <span class="n">git</span>
</span></span><span class="line"><span class="cl"><span class="n">choco</span> <span class="n">install</span> <span class="n">gnupg</span>
</span></span></code></pre></div><p>At the time of this writing, the current version of Git is 2.42.0 and GnuPG (gpg) is 2.4.3.  Verify the tools are installed correctly.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">git</span> <span class="p">-</span><span class="n">-version</span>
</span></span><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-version</span>
</span></span></code></pre></div><h3 id="configuration">Configuration</h3>
<p>There&rsquo;s some minimum configuration necessary in <code>git</code> before we get started; your name, email, and the location of <code>gpg.exe</code>.</p>
<p>Let&rsquo;s confirm that now.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">config</span> <span class="p">-</span><span class="n">-global</span> <span class="n">user</span><span class="p">.</span><span class="py">name</span>
</span></span><span class="line"><span class="cl"><span class="n">git</span> <span class="n">config</span> <span class="p">-</span><span class="n">-global</span> <span class="n">user</span><span class="p">.</span><span class="py">email</span>
</span></span></code></pre></div><p>If these commands return nothing, we need to give them values.  The <code>email</code> here <strong>must</strong> also be used when creating the keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">config</span> <span class="p">-</span><span class="n">-global</span> <span class="n">user</span><span class="p">.</span><span class="py">name</span> <span class="s2">&#34;First Last&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">git</span> <span class="n">config</span> <span class="p">-</span><span class="n">-global</span> <span class="n">user</span><span class="p">.</span><span class="py">email</span> <span class="s2">&#34;email@example.com&#34;</span>
</span></span></code></pre></div><p>Since we&rsquo;re using an externally installed version of <code>gpg</code>, we need to tell <code>git</code> to use the version we installed.  Depending on the install method, that location may vary.  You can use <code>where</code> to find the path.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">where</span><span class="p">.</span><span class="py">exe</span> <span class="n">gpg</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Text" data-lang="Text"><span class="line"><span class="cl">C:\Program Files (x86)\gnupg\bin\gpg.exe
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">config</span> <span class="p">-</span><span class="n">-global</span> <span class="n">gpg</span><span class="p">.</span><span class="py">program</span> <span class="s2">&#34;C:\Program Files (x86)\gnupg\bin\gpg.exe&#34;</span>
</span></span></code></pre></div><p><code>git</code> will now use the correct version of <code>gpg</code> for all operations.</p>
<h3 id="separate-gpg-home-directories">Separate GPG Home Directories</h3>
<p>We will be creating two keypairs, a &ldquo;certification&rdquo; pair and a &ldquo;signing&rdquo; keypair, which will technically be a &ldquo;subkey&rdquo; of the certification keypair.  The certification keypair is used to create and manage other keys, like the signing keypair. In normal daily usage, Git only needs to be aware of your signing keypair.</p>
<p>It&rsquo;s considered best practice to keep your certification keypair in an isolated, highly secure, and separate environment from where you will do your daily work.  This is especially true if your daily driver is a laptop and can be stolen easier than a desktop.  The particularly security conscious readers might suggest using a completely separate machine or an <a href="https://www.howtogeek.com/687792/the-ultimate-defense-what-is-an-air-gapped-computer/" target="_blank" rel="noopener noreffer ">air-gapped</a> virtual machine, or other more highly secure method to keep the certification keypair separated from our normal workflow.  For the purposes of this article, we will be mimicking a separate environment by using two separate <code>GNUPGHOME</code> directories on a single machine, one for key management and the other for normal usage.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Tip - Home Directory<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>By default, <code>gpg</code> stores data in <code>%AppData%\gnupg</code>. Set the <code>GNUPGHOME</code> environment variable or use the <code>--homedir</code> option to use a different directory.</p>
<p>I normally set the <code>GNUPGHOME</code> variable to <code>%UserProfile%\.gnupg</code> so that PowerShell and Git Bash will share the same directory.</p>
</div>
        </div>
    </div>
<div class="details admonition danger open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-skull-crossbones fa-fw" aria-hidden="true"></i>Protect the Certification Keypair<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">Seriously, protect the certification keypair.  With this key, other people can assume your identity and defeat the entire purpose signing commits.  Personally, after performing any key management activities in a virtual machine that does not have network access, I zip up the entire home directory and store it in my password manager.</div>
        </div>
    </div>
<h2 id="the-scenario">The Scenario</h2>
<p>For the purposes of this exercise I&rsquo;ll be using <code>Brad Knowles</code> as my name and <code>personal@example.com</code> for my email.  This will serve as my digital identity.  Your identity is tied to the certification keypair and any subkeys created from it.  If you need multiple identities, say one for personal use and another for work, you would create two sets of certification keypairs and signing keypairs<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>First we will create the certification keypair, then the signing keypair, all within the &ldquo;certification&rdquo; directory.  Then we&rsquo;ll export the signing keypair to a file so it can be imported into our &ldquo;normal&rdquo; directory.  Finally, we&rsquo;ll export the public half of the signing keypair.  This key will be uploaded to GitHub and published externally so others can verify your commits locally.</p>
<p>It sounds like a lot, but it&rsquo;s really not.  Ready?  Let&rsquo;s go!</p>
<h2 id="generate-certification-key">Generate Certification Key</h2>
<p>Certification keys are generated in the &ldquo;certification environment&rdquo; I described above.  Let&rsquo;s the set <code>GNUPGHOME</code> for the certification environment.  This can be any directory you prefer, just remember which directory you chose.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$env:GNUPGHOME</span><span class="p">=</span><span class="s2">&#34;</span><span class="nv">$env:UserProfile</span><span class="s2">\.gnugp-cert&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-version</span>
</span></span></code></pre></div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="hl"><span class="lnt"> 1
</span></span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="hl"><span class="lnt"> 8
</span></span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line hl"><span class="cl">gpg (GnuPG) 2.4.3
</span></span><span class="line"><span class="cl">libgcrypt 1.10.2
</span></span><span class="line"><span class="cl">Copyright (C) 2023 g10 Code GmbH
</span></span><span class="line"><span class="cl">License GNU GPL-3.0-or-later &lt;https://gnu.org/licenses/gpl.html&gt;
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">
</span></span><span class="line hl"><span class="cl">Home: C:\Users\Brad\.gnupg-cert
</span></span><span class="line"><span class="cl">Supported algorithms:
</span></span><span class="line"><span class="cl">Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
</span></span><span class="line"><span class="cl">Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
</span></span><span class="line"><span class="cl">        CAMELLIA128, CAMELLIA192, CAMELLIA256
</span></span><span class="line"><span class="cl">Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
</span></span><span class="line"><span class="cl">Compression: Uncompressed, ZIP, ZLIB, BZIP2
</span></span></code></pre></td></tr></table>
</div>
</div><p>The highlighted row shows where the <code>GNUPGHOME</code> directory resides.</p>
<p>Everything is installed, configured properly, and we&rsquo;re in the certification environment.  Let&rsquo;s start creating keys!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-expert</span> <span class="p">-</span><span class="n">-full-generate-key</span>
</span></span></code></pre></div><p>We use <code>expert</code> and <code>full-generate-key</code> flags to show all the available key creation options.</p>
<h3 id="choosing-key-and-hash-type">Choosing Key and Hash Type</h3>
<p><code>Gpg</code> responds with this list of key options:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg (GnuPG) 2.4.3; Copyright (C) 2023 g10 Code GmbH
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please select what kind of key you want:
</span></span><span class="line"><span class="cl">   (1) RSA and RSA
</span></span><span class="line"><span class="cl">   (2) DSA and Elgamal
</span></span><span class="line"><span class="cl">   (3) DSA (sign only)
</span></span><span class="line"><span class="cl">   (4) RSA (sign only)
</span></span><span class="line"><span class="cl">   (7) DSA (set your own capabilities)
</span></span><span class="line"><span class="cl">   (8) RSA (set your own capabilities)
</span></span><span class="line"><span class="cl">   (9) ECC (sign and encrypt) *default*
</span></span><span class="line"><span class="cl">  (10) ECC (sign only)
</span></span><span class="line"><span class="cl">  (11) ECC (set your own capabilities)
</span></span><span class="line"><span class="cl">  (13) Existing key
</span></span><span class="line"><span class="cl">  (14) Existing key from card
</span></span><span class="line"><span class="cl">Your selection?
</span></span></code></pre></div><p>Git itself isn&rsquo;t really concerned with the option you choose, but GitHub only supports these key types <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>:</p>
<ul>
<li>RSA</li>
<li>ElGamal</li>
<li>DSA</li>
<li>ECDH</li>
<li>ECDSA</li>
<li>EdDSA</li>
</ul>
<p>The GitHub documentation demonstrates creating keys using RSA and 4096 bits. I&rsquo;m opting for a more secure <sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> key and choosing <code>EdDSA</code>, which corresponds to option <code>(11) ECC (set your own capabilities)</code>.</p>
<p>We&rsquo;re choosing <code>11</code> because we want to customize what actions our key can perform.</p>
<p>Type <code>11</code> and press <kbd>Enter</kbd>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Possible actions for this ECC key: Sign Certify Authenticate
</span></span><span class="line hl"><span class="cl">Current allowed actions: Sign Certify
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   (S) Toggle the sign capability
</span></span><span class="line"><span class="cl">   (A) Toggle the authenticate capability
</span></span><span class="line"><span class="cl">   (Q) Finished
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your selection?
</span></span></code></pre></div><p>Notice the <code>Current allowed actions:</code> for the key are <code>Sign</code> and <code>Certify</code>.  Since we want this key to used for certification only, enter <code>S</code> to toggle OFF the <code>Sign</code> action.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Possible actions for this ECC key: Sign Certify Authenticate
</span></span><span class="line hl"><span class="cl">Current allowed actions: Certify
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   (S) Toggle the sign capability
</span></span><span class="line"><span class="cl">   (A) Toggle the authenticate capability
</span></span><span class="line"><span class="cl">   (Q) Finished
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your selection?
</span></span></code></pre></div><p>Now the <code>Current allowed actions:</code> line only has <code>Certify</code> listed.  Enter <code>Q</code> to goto the next step.</p>
<p><code>Gpg</code> presents the choices of elliptic curve to use:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Please select which elliptic curve you want:
</span></span><span class="line hl"><span class="cl">   (1) Curve 25519 *default*
</span></span><span class="line"><span class="cl">   (2) Curve 448
</span></span><span class="line"><span class="cl">   (3) NIST P-256
</span></span><span class="line"><span class="cl">   (4) NIST P-384
</span></span><span class="line"><span class="cl">   (5) NIST P-521
</span></span><span class="line"><span class="cl">   (6) Brainpool P-256
</span></span><span class="line"><span class="cl">   (7) Brainpool P-384
</span></span><span class="line"><span class="cl">   (8) Brainpool P-512
</span></span><span class="line"><span class="cl">   (9) secp256k1
</span></span><span class="line"><span class="cl">Your selection?
</span></span></code></pre></div><p><code>Curve 25519</code><sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup> is good<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup> enough<sup id="fnref1:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> for our purposes. Enter <code>1</code>.</p>
<h3 id="setting-key-expiration">Setting Key Expiration</h3>
<p>Do you want the key to expire?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Please specify how long the key should be valid.
</span></span><span class="line hl"><span class="cl">         0 = key does not expire
</span></span><span class="line"><span class="cl">      &lt;n&gt;  = key expires in n days
</span></span><span class="line"><span class="cl">      &lt;n&gt;w = key expires in n weeks
</span></span><span class="line"><span class="cl">      &lt;n&gt;m = key expires in n months
</span></span><span class="line"><span class="cl">      &lt;n&gt;y = key expires in n years
</span></span><span class="line"><span class="cl">Key is valid for? (0)
</span></span></code></pre></div><p>Do you want the key to expire? There are some <a href="https://security.stackexchange.com/a/81844" target="_blank" rel="noopener noreffer ">conflicting</a>, <a href="https://security.stackexchange.com/a/79386" target="_blank" rel="noopener noreffer ">opinions</a>, <a href="https://web.archive.org/web/20160629180203/http://madduck.net/blog/2006.06.20:expiring-gpg/" target="_blank" rel="noopener noreffer ">and another opinion</a> on whether expiration dates provide any greater level of security.</p>
<p>I&rsquo;m choosing to NOT use an expiration date on my certification key, but will use one on the signing subkey.  Feel free to choose differently here.</p>
<h3 id="establishing-identity">Establishing Identity</h3>
<p>Next you will be prompted for your name, email, and a optional comment.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Tip - Email<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">The email address is very important.  It <strong>MUST</strong> match the email configured in <code>git</code> and a verified email present in your GitHub account.</div>
        </div>
    </div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">GnuPG needs to construct a user ID to identify your key.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Real name: Brad Knowles
</span></span><span class="line"><span class="cl">Email: personal@example.com
</span></span><span class="line"><span class="cl">Comment:
</span></span></code></pre></div><p><code>Gpg</code> asks to confirm your selections with the option to change the values one last time before creating the key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">You selected this USER-ID:
</span></span><span class="line"><span class="cl">    &#34;Brad Knowles &lt;personal@example.com&gt;&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?
</span></span></code></pre></div><p>Change as necessary, once everything looks OK, enter <code>O</code> and press <kbd>Enter</kbd>.</p>
<p>You will be presented with a dialog to enter a passphrase.</p>
<div id="id-1"><img
class="lazyload"
src="/svg/loading.min.svg"
data-src="/blog/claiming-your-git-identity-with-commit-signatures/pinentry.png"
data-srcset="/blog/claiming-your-git-identity-with-commit-signatures/pinentry.png, /blog/claiming-your-git-identity-with-commit-signatures/pinentry.png 1.5x, /blog/claiming-your-git-identity-with-commit-signatures/pinentry.png 2x"
data-sizes="auto"
alt="Dialog box asking âPlease enter the passphrase to protect your new keyâ with an input box awaiting user input."
title=" " width="549" height="382" /></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Tip - Passphrase<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Use a passphrase to protect your key. Then put the passphrase into a password manager. If your key is stolen this will be the only protection you have against bad people using it.</p>
<p>Yes, you will have to enter it every time you make a commit, but it&rsquo;s easy to copy and paste from your password manager.</p>
</div>
        </div>
    </div>
<p>The newly created key will be displayed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg: directory &#39;C:\\Users\\Brad\\.gnupg-cert\\openpgp-revocs.d&#39; created
</span></span><span class="line"><span class="cl">gpg: revocation certificate stored as &#39;C:\\Users\\Brad\\.gnupg-cert\\openpgp-revocs.d\\3DF0BC8B128E675BF40A7701209715C6642286C4.rev&#39;
</span></span><span class="line"><span class="cl">public and secret key created and signed.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pub   ed25519 2023-07-01 [C]
</span></span><span class="line"><span class="cl">      3DF0BC8B128E675BF40A7701209715C6642286C4
</span></span><span class="line"><span class="cl">uid                      Brad Knowles &lt;personal@example.com&gt;
</span></span></code></pre></div><p>We&rsquo;ll describe the output after we create the signing key.</p>
<h2 id="generate-signing-subkey">Generate Signing Subkey</h2>
<p>To add a subkey, we edit the certification key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-expert</span> <span class="p">-</span><span class="n">-edit-key</span> <span class="s2">&#34;personal@example.com&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg (GnuPG) 2.4.3; Copyright (C) 2023 g10 Code GmbH
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Secret key is available.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sec  ed25519/209715C6642286C4
</span></span><span class="line"><span class="cl">     created: 2023-07-01  expires: never       usage: C
</span></span><span class="line"><span class="cl">     trust: ultimate      validity: ultimate
</span></span><span class="line"><span class="cl">[ultimate] (1). Brad Knowles &lt;personal@example.com&gt;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span><span class="p">&gt;</span> <span class="n">addkey</span>
</span></span></code></pre></div><h3 id="choosing-key-and-hash-type-1">Choosing Key and Hash Type</h3>
<p>There is a prebuilt option for creating signing key, so we&rsquo;ll choose <code>10</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Please select what kind of key you want:
</span></span><span class="line"><span class="cl">   (3) DSA (sign only)
</span></span><span class="line"><span class="cl">   (4) RSA (sign only)
</span></span><span class="line"><span class="cl">   (5) Elgamal (encrypt only)
</span></span><span class="line"><span class="cl">   (6) RSA (encrypt only)
</span></span><span class="line"><span class="cl">   (7) DSA (set your own capabilities)
</span></span><span class="line"><span class="cl">   (8) RSA (set your own capabilities)
</span></span><span class="line hl"><span class="cl">  (10) ECC (sign only)
</span></span><span class="line"><span class="cl">  (11) ECC (set your own capabilities)
</span></span><span class="line"><span class="cl">  (12) ECC (encrypt only)
</span></span><span class="line"><span class="cl">  (13) Existing key
</span></span><span class="line"><span class="cl">  (14) Existing key from card
</span></span><span class="line"><span class="cl">Your selection?
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Please select which elliptic curve you want:
</span></span><span class="line hl"><span class="cl">   (1) Curve 25519 *default*
</span></span><span class="line"><span class="cl">   (2) Curve 448
</span></span><span class="line"><span class="cl">   (3) NIST P-256
</span></span><span class="line"><span class="cl">   (4) NIST P-384
</span></span><span class="line"><span class="cl">   (5) NIST P-521
</span></span><span class="line"><span class="cl">   (6) Brainpool P-256
</span></span><span class="line"><span class="cl">   (7) Brainpool P-384
</span></span><span class="line"><span class="cl">   (8) Brainpool P-512
</span></span><span class="line"><span class="cl">   (9) secp256k1
</span></span><span class="line"><span class="cl">Your selection?
</span></span></code></pre></div><p>As we did for the certification key, we&rsquo;ll select <code>Curve 25519</code>, option <code>1</code>.</p>
<h3 id="setting-key-expiration-1">Setting Key Expiration</h3>
<p>As I mentioned previously, I&rsquo;m setting an expiration date on my signing subkey.  <code>Git</code> will not use an expired key to sign commits.  So if your key falls into the wrong hands, it will only work till the expiration date.  While an expiration date is not a complete security measure, it can limit misuse.  Ultimately, protecting the certification key and using passphrases are the real security protections.</p>
<p>Expiration dates are easily changed with the certification key.  When the key expires, update the date and republish the keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Please specify how long the key should be valid.
</span></span><span class="line"><span class="cl">         0 = key does not expire
</span></span><span class="line"><span class="cl">      &lt;n&gt;  = key expires in n days
</span></span><span class="line"><span class="cl">      &lt;n&gt;w = key expires in n weeks
</span></span><span class="line"><span class="cl">      &lt;n&gt;m = key expires in n months
</span></span><span class="line"><span class="cl">      &lt;n&gt;y = key expires in n years
</span></span><span class="line"><span class="cl">Key is valid for? (0)
</span></span></code></pre></div><p>I want my subkey to expire every 2 years, so I typed <code>2y</code>.  Choose what makes the most sense for you.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">Key expires at 6/30/2025 7:16:50 PM Eastern Daylight Time
</span></span><span class="line"><span class="cl">Is this correct? (y/N) y
</span></span><span class="line"><span class="cl">Really create? (y/N) y
</span></span><span class="line"><span class="cl">We need to generate a lot of random bytes. It is a good idea to perform
</span></span><span class="line"><span class="cl">some other action (type on the keyboard, move the mouse, utilize the
</span></span><span class="line"><span class="cl">disks) during the prime generation; this gives the random number
</span></span><span class="line"><span class="cl">generator a better chance to gain enough entropy.
</span></span></code></pre></div><p>You will be prompted for the passphrase you entered for the certification key.</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw" aria-hidden="true"></i>Warning - Passphrase<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">You did use a passphrase right?</div>
        </div>
    </div>
<p>The signing subkey to be created will be displayed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">sec  ed25519/209715C6642286C4
</span></span><span class="line"><span class="cl">     created: 2023-07-01  expires: never       usage: C
</span></span><span class="line"><span class="cl">     trust: ultimate      validity: ultimate
</span></span><span class="line"><span class="cl">ssb  ed25519/665CECFAD715DD26
</span></span><span class="line"><span class="cl">     created: 2023-07-01  expires: 2025-06-30  usage: S
</span></span><span class="line"><span class="cl">[ultimate] (1). Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg&gt;
</span></span></code></pre></div><h3 id="save-the-key">Save the Key</h3>
<p>Since we&rsquo;re adding a subkey to the certification key we have the extra step of saving our edits.</p>
<p>Enter <code>save</code> at the <code>gpg&gt;</code> prompt and the subkey is created.</p>
<h2 id="examining-the-keyring">Examining the Keyring</h2>
<p>Now that we have our keys, let&rsquo;s list them and go over the output.  We&rsquo;re adding some flags to <code>--list-keys</code> to display more information.</p>
<h3 id="public-keys">Public Keys</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-list-keys</span> <span class="p">-</span><span class="n">-keyid-format</span> <span class="n">long</span> <span class="p">-</span><span class="n">-with-fingerprint</span> <span class="p">-</span><span class="n">-with-subkey-fingerprint</span> <span class="s2">&#34;personal@example.com&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">pub   ed25519/209715C6642286C4 2023-07-01 [C]
</span></span><span class="line"><span class="cl">      Key fingerprint = 3DF0 BC8B 128E 675B F40A  7701 2097 15C6 6422 86C4
</span></span><span class="line"><span class="cl">uid                 [ultimate] Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">sub   ed25519/665CECFAD715DD26 2023-07-01 [S] [expires: 2025-06-30]
</span></span><span class="line"><span class="cl">      Key fingerprint = 2AA4 2721 506A 9A98 96E6  DB17 665C ECFA D715 DD26
</span></span></code></pre></div><p>The first record line is: <code>pub   ed25519/209715C6642286C4 2023-07-01 [C]</code></p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>pub</td>
<td>The type of record, public key</td>
</tr>
<tr>
<td>ed25519 <sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup></td>
<td>Key Algorithm</td>
</tr>
<tr>
<td>209715C6642286C4</td>
<td>Key ID, the 64 bit keyid as specified by OpenPGP</td>
</tr>
<tr>
<td>2023-07-01</td>
<td>Creation Date</td>
</tr>
<tr>
<td>[C]</td>
<td>The capabilities of the key, certification</td>
</tr>
</tbody>
</table>
<p>The next line <code>Key fingerprint = 3DF0 BC8B 128E 675B F40A  7701 2097 15C6 6422 86C4</code> is the key&rsquo;s <a href="https://en.wikipedia.org/wiki/Public_key_fingerprint" target="_blank" rel="noopener noreffer ">fingerprint</a></p>
<p>A new record, <code>uid</code> starts the next line <code>uid           [ultimate] Brad Knowles &lt;personal@example.com&gt;</code>.</p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>uid</td>
<td>The type of record, user id</td>
</tr>
<tr>
<td>[ultimate]</td>
<td>Describes the level of <a href="https://gpgtools.tenderapp.com/kb/faq/what-is-ownertrust-trust-levels-explained" target="_blank" rel="noopener noreffer ">trust</a> the key has on this system.  Ultimate is only ever for your own keys.</td>
</tr>
<tr>
<td>Brad Knowles &lt;personal@example.com&gt;</td>
<td>Name, email, and comment associated with the user id.</td>
</tr>
</tbody>
</table>
<p>The next line describes the subkey information, <code>sub   ed25519/665CECFAD715DD26 2023-07-01 [S] [expires: 2025-06-30]</code></p>
<table>
<thead>
<tr>
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>sub</td>
<td>The type of record, subkey</td>
</tr>
<tr>
<td>ed25519</td>
<td>Key Algorithm</td>
</tr>
<tr>
<td>665CECFAD715DD26</td>
<td>KeyID, the 64 bit keyid as specified by OpenPGP</td>
</tr>
<tr>
<td>2023-07-01</td>
<td>Creation Date</td>
</tr>
<tr>
<td>[S]</td>
<td>The capabilities of the key, signing</td>
</tr>
<tr>
<td>[expires: 2025-06-30]</td>
<td>Expiration Date</td>
</tr>
</tbody>
</table>
<p>The last line <code>Key fingerprint = 2AA4 2721 506A 9A98 96E6  DB17 665C ECFA D715 DD26</code> is the subkey&rsquo;s <a href="https://en.wikipedia.org/wiki/Public_key_fingerprint" target="_blank" rel="noopener noreffer ">fingerprint</a></p>
<p>Full details of the fields are available in the <a href="https://github.com/gpg/gnupg/blob/master/doc/DETAILS" target="_blank" rel="noopener noreffer ">GnuPG Details</a> documentation.</p>
<h3 id="secret-keys">Secret Keys</h3>
<p>Now, let&rsquo;s look at the secret keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-list-secret-keys</span> <span class="p">-</span><span class="n">-keyid-format</span> <span class="n">long</span> <span class="p">-</span><span class="n">-with-fingerprint</span> <span class="p">-</span><span class="n">-with-subkey-fingerprint</span> <span class="s2">&#34;personal@example.com&#34;</span>
</span></span></code></pre></div><p>This command is the same as the previous one, with the exception of <code>--list-secret-keys</code>.  This will list the keys from the secret keyring.</p>
<p>It also has the same output as <code>--list-keys</code> with exception of the first line.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line hl"><span class="cl">sec   ed25519/209715C6642286C4 2023-07-01 [C]
</span></span><span class="line"><span class="cl">      Key fingerprint = 3DF0 BC8B 128E 675B F40A  7701 2097 15C6 6422 86C4
</span></span><span class="line"><span class="cl">uid                 [ultimate] Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">ssb   ed25519/665CECFAD715DD26 2023-07-01 [S] [expires: 2025-06-30]
</span></span><span class="line"><span class="cl">      Key fingerprint = 2AA4 2721 506A 9A98 96E6  DB17 665C ECFA D715 DD26
</span></span></code></pre></div><p>The previous key type was <code>pub</code> now it is <code>sec</code>, which, not surprisingly stands for secret key.</p>
<h2 id="exporting-keys">Exporting Keys</h2>
<p>Since our signing subkey is the only one we want in our &ldquo;normal&rdquo; environment, we export it and not the certification key.  We need both the secret subkey and the public subkey so we export and save them with two separate commands.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-armor</span> <span class="p">-</span><span class="n">-output</span> <span class="s2">&#34;personal-example.com.665CECFAD715DD26.sign.pub.gpg-key.asc&#34;</span> <span class="p">-</span><span class="n">-export</span> <span class="n">665CECFAD715DD26</span><span class="p">!</span>
</span></span><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-armor</span> <span class="p">-</span><span class="n">-output</span> <span class="s2">&#34;personal-example.com.665CECFAD715DD26.sign.sec.gpg-key.asc&#34;</span> <span class="p">-</span><span class="n">-export-secret-subkeys</span> <span class="n">665CECFAD715DD26</span><span class="p">!</span>
</span></span></code></pre></div><div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw" aria-hidden="true"></i>Info - Subkey Exclamation Point<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Notice the <code>!</code> suffix at the end of the keyid.</p>
<blockquote>
<p>The official wording is &ldquo;an exclamation mark (!) may be appended to force using the specified primary or secondary key and not to try and calculate which primary or secondary key to use.&rdquo;</p>
</blockquote>
<p>I believe this only matters if there are multiple subkeys for a given certification (primary) key.  It&rsquo;s a good habit though to force <code>gpg</code> to be explicit in its actions whenever possible.</p>
</div>
        </div>
    </div>
<p>The secret subkey will be imported to our normal environment; while the public one will be uploaded to GitHub and published publicly so others can verify your commits.</p>
<h2 id="importing-into-working-keyring">Importing into Working Keyring</h2>
<p>We&rsquo;ll be switching to our normal environment now.  We need to <strong>securely</strong> transport the secret key from the certification environment. In this contrived setup, it&rsquo;s not a concern, but keep this mind as you move your keys to different machines.  <strong>DO NOT USE EMAIL</strong> ð</p>
<p>First, let&rsquo;s switch to our normal environment:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$env:GNUPGHOME</span><span class="p">=</span><span class="s2">&#34;</span><span class="nv">$env:UserProfile</span><span class="s2">\.gnugp&#34;</span>
</span></span></code></pre></div><p>Import the key with the following command.  You will be prompted for the passphrase.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-import</span> <span class="s2">&#34;personal-example.com.665CECFAD715DD26.sign.sec.gpg-key.asc&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg: key 209715C6642286C4: public key &#34;Brad Knowles &lt;personal@example.com&gt;&#34; imported
</span></span><span class="line"><span class="cl">gpg: To migrate &#39;secring.gpg&#39;, with each smartcard, run: gpg --card-status
</span></span><span class="line"><span class="cl">gpg: key 209715C6642286C4: secret key imported
</span></span><span class="line"><span class="cl">gpg: Total number processed: 1
</span></span><span class="line"><span class="cl">gpg:               imported: 1
</span></span><span class="line"><span class="cl">gpg:       secret keys read: 1
</span></span><span class="line"><span class="cl">gpg:   secret keys imported: 1
</span></span></code></pre></div><p>Let&rsquo;s look at the keys.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-list-keys</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">pub   ed25519 2023-07-01 [C]
</span></span><span class="line"><span class="cl">      3DF0BC8B128E675BF40A7701209715C6642286C4
</span></span><span class="line hl"><span class="cl">uid           [ unknown] Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">sub   ed25519 2023-07-01 [S] [expires: 2025-06-30]
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-list-secret-keys</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line hl"><span class="cl">sec#  ed25519 2023-07-01 [C]
</span></span><span class="line"><span class="cl">      3DF0BC8B128E675BF40A7701209715C6642286C4
</span></span><span class="line hl"><span class="cl">uid           [ unknown] Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">ssb   ed25519 2023-07-01 [S] [expires: 2025-06-30]
</span></span></code></pre></div><p>Two things to notice:</p>
<ol>
<li>The secret key record type, <code>sec</code> has a modifier of <code>#</code>.</li>
<li>The trust type on both keys is <code>unknown</code>.</li>
</ol>
<p>The <code>#</code> modifier has special meaning.  According to the <a href="https://www.mankier.com/1/gpg#--list-secret-keys" target="_blank" rel="noopener noreffer ">gpg man page</a> of the <code>--list-secret-keys</code> command.</p>
<blockquote>
<p>List the specified secret keys.  If no keys are specified, then all known secret keys are listed.</p>
<p>A <code>#</code> after the initial tags <code>sec</code> or <code>ssb</code> means that the secret key or subkey is currently not usable.  We also say that this key has been taken offline (for example, a primary key can be taken offline by exporting the key using the command <code>--export-secret-subkeys</code>).  A <code>&gt;</code> after these tags indicate that the key is stored on a smartcard.  See also <code>--list-keys</code>.</p>
</blockquote>
<p>This is what we want to see.  The secret certification key is unusable, because we didn&rsquo;t export it from the certification environment.  This means that if this environment is compromised our secret certification key is still safe.</p>
<h3 id="setting-key-trust">Setting Key Trust</h3>
<p>We want this keypair to be fully trusted, since we own it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-expert</span> <span class="p">-</span><span class="n">-edit-key</span> <span class="s2">&#34;personal@example.com&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg (GnuPG) 2.4.3; Copyright (C) 2023 g10 Code GmbH
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Secret subkeys are available.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pub  ed25519/209715C6642286C4
</span></span><span class="line"><span class="cl">     created: 2023-07-01  expires: never       usage: C
</span></span><span class="line"><span class="cl">     trust: unknown       validity: unknown
</span></span><span class="line"><span class="cl">ssb  ed25519/665CECFAD715DD26
</span></span><span class="line"><span class="cl">     created: 2023-07-01  expires: 2025-06-30  usage: S
</span></span><span class="line"><span class="cl">[ unknown] (1). Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">gpg&gt;
</span></span></code></pre></div><p>Enter <code>trust</code> at the <code>gpg&gt;</code> prompt.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">pub  ed25519/209715C6642286C4
</span></span><span class="line"><span class="cl">     created: 2023-07-01  expires: never       usage: C
</span></span><span class="line"><span class="cl">     trust: unknown       validity: unknown
</span></span><span class="line"><span class="cl">ssb  ed25519/665CECFAD715DD26
</span></span><span class="line"><span class="cl">     created: 2023-07-01  expires: 2025-06-30  usage: S
</span></span><span class="line"><span class="cl">[ unknown] (1). Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please decide how far you trust this user to correctly verify other users&#39; keys
</span></span><span class="line"><span class="cl">(by looking at passports, checking fingerprints from different sources, etc.)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  1 = I don&#39;t know or won&#39;t say
</span></span><span class="line"><span class="cl">  2 = I do NOT trust
</span></span><span class="line"><span class="cl">  3 = I trust marginally
</span></span><span class="line"><span class="cl">  4 = I trust fully
</span></span><span class="line hl"><span class="cl">  5 = I trust ultimately
</span></span><span class="line"><span class="cl">  m = back to the main menu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Your decision?
</span></span></code></pre></div><p>Since this is our own key, we can trust it ultimately. Enter <code>5</code>, confirm with <code>y</code>, then type <code>quit</code> to exit <code>gpg</code>.</p>
<p>More information about trust levels and the importance of trust can be found at <a href="https://gpgtools.tenderapp.com/kb/faq/what-is-ownertrust-trust-levels-explained" target="_blank" rel="noopener noreffer ">What is Ownertrust? Trust-levels explained</a> and the section <a href="https://www.gnupg.org/gph/en/manual/x334.html" target="_blank" rel="noopener noreffer ">Validating other keys on your public keyring</a> from The GNU Privacy Handbook.</p>
<h2 id="configuring-git-and-gpg">Configuring Git and Gpg</h2>
<h3 id="signing-subkey">Signing Subkey</h3>
<p>Now that we have a trusted signing keypair, we need to tell <code>git</code> to use this key when signing commits.</p>
<p>List the secret keys to get the key id, <code>665CECFAD715DD26</code>, of the signing subkey.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-list-secret-keys</span> <span class="p">-</span><span class="n">-keyid-format</span> <span class="n">long</span> <span class="p">-</span><span class="n">-with-fingerprint</span> <span class="p">-</span><span class="n">-with-subkey-fingerprint</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">sec   ed25519/209715C6642286C4 2023-07-01 [C]
</span></span><span class="line"><span class="cl">      Key fingerprint = 3DF0 BC8B 128E 675B F40A  7701 2097 15C6 6422 86C4
</span></span><span class="line"><span class="cl">uid                 [ultimate] Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line hl"><span class="cl">ssb   ed25519/665CECFAD715DD26 2023-07-01 [S] [expires: 2025-06-30]
</span></span><span class="line"><span class="cl">      Key fingerprint = 2AA4 2721 506A 9A98 96E6  DB17 665C ECFA D715 DD26
</span></span></code></pre></div><p>Use the <code>user.signingKey</code> configuration property to tell <code>git</code> about our key.  Don&rsquo;t forget the exclamation point <code>!</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">config</span> <span class="p">-</span><span class="n">-global</span> <span class="n">user</span><span class="p">.</span><span class="py">signingKey</span> <span class="n">665CECFAD715DD26</span><span class="p">!</span>
</span></span></code></pre></div><p>This tells <code>git</code> to use this signing subkey for every repo on the machine.  If there are some instances where you want a specific repository to use a different key, navigate to a directory within the repository and use the <code>config</code> command again, but with the <code>--local</code> flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">config</span> <span class="p">-</span><span class="n">-local</span> <span class="n">user</span><span class="p">.</span><span class="py">signingKey</span> <span class="p">&lt;</span><span class="n">other</span> <span class="n">keyid</span><span class="p">&gt;!</span>
</span></span></code></pre></div><h3 id="signing-commits">Signing Commits</h3>
<p>We&rsquo;ve told <code>git</code> where to find <code>gpg</code> and the signing key to use, but haven&rsquo;t told it to sign any commits.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">config</span> <span class="p">-</span><span class="n">-global</span> <span class="n">commit</span><span class="p">.</span><span class="py">gpgSign</span> <span class="n">true</span>
</span></span></code></pre></div><p><code>Git</code> will now attempt to sign every commit on every repository.  If you need to exclude some repositories from being signed, set the <code>commit.gpgSign</code> value to <code>false</code> for that repository using the <code>--local</code> flag.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">config</span> <span class="p">-</span><span class="n">-local</span> <span class="n">commit</span><span class="p">.</span><span class="py">gpgSign</span> <span class="n">false</span>
</span></span></code></pre></div><p>Alternatively, if you only need a few repositories to use sign commits, forgo the global setting and set <code>commit.gpgSign</code> to <code>true</code> only in those repositories.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Conditional Git Config Settings<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">GitLab has documentation on how to configure <code>git</code> conditionally using <code>[includeIf]</code> syntax.  While beyond the scope of this article, you can learn more in the <a href="https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/#set-signing-key-conditionally" target="_blank" rel="noopener noreffer ">Set signing key conditionally</a> section of the Gpg Signed Commits documentation.</div>
        </div>
    </div>
<p>When you make a commit you&rsquo;ll be prompted for your passphrase. Once entered the commit finishes as normal.</p>
<p>Hooray!! ð You&rsquo;ve signed your first commit!</p>
<h2 id="verifying-signed-commits">Verifying Signed Commits</h2>
<p>Now that we are signing commits, how do we see the signatures when running <code>git log</code>?  How do we verify commits from other contributors are signed (or not)?  We use the <code>--show-signature</code> option of <code>git log</code>.</p>
<h3 id="locally">Locally</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">log</span> <span class="p">-</span><span class="n">-show-signature</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">commit 1065155f5b2803883e2610b584c61ecee5933c93 (HEAD -&gt; main, origin/main)
</span></span><span class="line hl"><span class="cl">gpg: Signature made 7/2/2023 6:48:45 PM Eastern Daylight Time^M
</span></span><span class="line hl"><span class="cl">gpg:                using EDDSA key 2AA42721506A9A9896E6DB17665CECFAD715DD26^M
</span></span><span class="line hl"><span class="cl">gpg: Good signature from &#34;Brad Knowles &lt;personal@example.com&gt;&#34; [ultimate]^M
</span></span><span class="line hl"><span class="cl">Primary key fingerprint: 3DF0 BC8B 128E 675B F40A  7701 2097 15C6 6422 86C4^M
</span></span><span class="line hl"><span class="cl">     Subkey fingerprint: 2AA4 2721 506A 9A98 96E6  DB17 665C ECFA D715 DD26^M
</span></span><span class="line"><span class="cl">Author: Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">Date:   Sun Jul 2 18:48:45 2023 -0400
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Initial commit
</span></span></code></pre></div><p>Adding <code>--show-signature</code> to <code>git log</code> checks the validity of a signed commit object by passing the signature to <code>gpg --verify</code> and displays the output.</p>
<p>This works because <code>gpg</code> has the public part of your signing key in the public keyring.  What would happen if another person made a signed commit and you ran this command again?</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg: Signature made 6/27/2023 5:07:56 PM Eastern Daylight Time^M
</span></span><span class="line"><span class="cl">gpg:                using EDDSA key &lt;keyid&gt;^M
</span></span><span class="line"><span class="cl">gpg: Can&#39;t check signature: No public key^M
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>Git</code> would tell you &ldquo;I see this commit is signed, but I can&rsquo;t verify the signature because you don&rsquo;t have this person&rsquo;s public key.&rdquo;</p>
<p>We solve this by importing their public key (which they need to have published somewhere that is publicly accessible).  This is covered in the <a href="#importing-others-keys" rel="">Importing Othersâ Keys</a> section.</p>
<h3 id="github">GitHub</h3>
<p>If you push this commit to GitHub, you&rsquo;ll see a new tag on the commit, &ldquo;Unverified.&rdquo;</p>
<a class="lightgallery" href="/blog/claiming-your-git-identity-with-commit-signatures/unverified-commit.png" title="Screenshot of a GitHub commit with an unverified icon off to the right" data-thumbnail="/blog/claiming-your-git-identity-with-commit-signatures/unverified-commit.png">
        <img
            class="lazyload"
            src="/svg/loading.min.svg"
            data-src="/blog/claiming-your-git-identity-with-commit-signatures/unverified-commit.png"
            data-srcset="/blog/claiming-your-git-identity-with-commit-signatures/unverified-commit.png, /blog/claiming-your-git-identity-with-commit-signatures/unverified-commit.png 1.5x, /blog/claiming-your-git-identity-with-commit-signatures/unverified-commit.png 2x"
            data-sizes="auto"
            alt="Screenshot of a GitHub commit with an unverified icon off to the right" width="1507" height="120" />
    </a>
<p>GitHub supports the concept of <a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification" target="_blank" rel="noopener noreffer ">verified commits</a>. GitHub will take the signature of a commit and attempt to validate it against the public GPG keys on your account that also match the email address of the commit. If they find a match, you&rsquo;ll see a verified icon and if not, you&rsquo;ll see the unverified icon.</p>
<a class="lightgallery" href="/blog/claiming-your-git-identity-with-commit-signatures/verified-commit.webp" title="Screenshot of a GitHub commit with a verified icon off to the right.  The verified icon is surrounded with a red rectangle." data-thumbnail="/blog/claiming-your-git-identity-with-commit-signatures/verified-commit.webp">
        <img
            class="lazyload"
            src="/svg/loading.min.svg"
            data-src="/blog/claiming-your-git-identity-with-commit-signatures/verified-commit.webp"
            data-srcset="/blog/claiming-your-git-identity-with-commit-signatures/verified-commit.webp, /blog/claiming-your-git-identity-with-commit-signatures/verified-commit.webp 1.5x, /blog/claiming-your-git-identity-with-commit-signatures/verified-commit.webp 2x"
            data-sizes="auto"
            alt="Screenshot of a GitHub commit with a verified icon off to the right.  The verified icon is surrounded with a red rectangle." width="1440" height="164" />
    </a>
<p>We need to upload the public signing subkey to our GitHub account.  Rather than repeating their docs, visit <a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account" target="_blank" rel="noopener noreffer ">adding a GPG key to your GitHub account</a> to walk through the process.  You already exported the public key earlier, just open the text file in any editor and copy the key for uploading.</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw" aria-hidden="true"></i>Other Providers<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>GitLab also supports verified commits.  The steps are similar to GitHub and are available <a href="https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/#add-a-gpg-key-to-your-account" target="_blank" rel="noopener noreffer ">here</a>.</p>
<p>Surprisingly, BitBucket and Azure DevOps do not support this.  BitBucket is &ldquo;working on it&rdquo; and tracking the effort in <a href="https://jira.atlassian.com/browse/BCLOUD-3166" target="_blank" rel="noopener noreffer ">JIRA ticket BCLOUD-3166</a>.  Azure DevOps is tracking interest with this <a href="https://developercommunity.visualstudio.com/t/show-whether-commits-are-verified-with-gpg-key-on/383281" target="_blank" rel="noopener noreffer ">user voice ticket</a>.</p>
</div>
        </div>
    </div>
<p>Most people stop here and consider the process complete, but that&rsquo;s not really true.  So far, only GitHub can verify our commits, but other developers looking at the code locally cannot.  They get the message we saw earlier <code>gpg: Can't check signature: No public key</code>.</p>
<p>To fix that, we must publish our keys to some publicly accessible place and the developer must import our key to their environment.  Let&rsquo;s do that now.</p>
<h2 id="publishing-public-keys">Publishing Public Keys</h2>
<h3 id="key-servers">Key Servers</h3>
<p>Traditionally, gpg keys are published are via key servers.  A <a href="https://gnupg.org/faq/gnupg-faq.html#define_keyserver" target="_blank" rel="noopener noreffer ">keyserver</a> is a service that publishes public keys and makes them searchable. You can upload your public signing key to a keyserver so that other users can find it.</p>
<p>Some of the popular ones:</p>
<ul>
<li><a href="https://keyserver.ubuntu.com/" target="_blank" rel="noopener noreffer ">https://keyserver.ubuntu.com/</a> (the current default of GnuPG)</li>
<li><a href="https://keys.openpgp.org/" target="_blank" rel="noopener noreffer ">https://keys.openpgp.org/</a></li>
<li><a href="https://pgp.mit.edu/" target="_blank" rel="noopener noreffer ">https://pgp.mit.edu/</a></li>
</ul>
<p>Unfortunately there are some potential privacy concerns with keyservers.  Spammers seem to be trolling keyservers to harvest emails.  The MIT PGP Public Key Server has the situation listed as an issue on their <a href="https://pgp.mit.edu/faq.html" target="_blank" rel="noopener noreffer ">FAQ</a>.</p>
<blockquote>
<p>I think spammers got my email address from the PGP key server. What can I do?</p>
<p>Yes, there have been reports of spammers harvesting addresses from PGP key servers. Unfortunately, there is not much that either we or you can do about this. Our best suggestion is you take advantage of any spam filtering technology offered by your ISP.</p>
</blockquote>
<p>There&rsquo;s also been an issue with key servers shutting down. This question, posted on superuser.com, <a href="https://superuser.com/q/227991" target="_blank" rel="noopener noreffer ">Where to upload PGP public key? Are KeyServers still surviving?</a> and <a href="https://unix.stackexchange.com/q/656205" target="_blank" rel="noopener noreffer ">sks-keyservers gone. What to use instead?</a> from unixstackexchange.com show a long of history of sites closing and users suggesting alternatives.</p>
<p>I&rsquo;m opting to not use a key server.  I will be publishing through two different channels; my own website and with multiple git cloud hosting providers.</p>
<p>If you opt to use a key server, the keyserver site links above have instructions on submitting your keys.</p>
<h3 id="web-key-directory">Web Key Directory</h3>
<p>I will be using <a href="https://wiki.gnupg.org/WKD" target="_blank" rel="noopener noreffer ">Web Key Directory</a> for my personal key.  It uses the domain of the primary user ID (email) on the key to find they key on that domain at a <a href="https://en.wikipedia.org/wiki/Well-known_URI" target="_blank" rel="noopener noreffer ">well known endpoint</a>.</p>
<p>If you own the domain of the email address on the key, you need to put the binary formatted key in the location <code>https://domain.com/.well-known/openpgpkey/hu/&lt;hashed value&gt;</code></p>
<p>To get the hash value, add <code>--with-wkd</code> to <code>--list-keys</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-list-keys</span> <span class="p">-</span><span class="n">-with-wkd</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">pub   ed25519 2023-07-01 [C]
</span></span><span class="line"><span class="cl">      3DF0BC8B128E675BF40A7701209715C6642286C4
</span></span><span class="line"><span class="cl">uid           [ultimate] Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line hl"><span class="cl">              5pw7sz7ipunrs4qpkrrzt131q98dwoen@example.com
</span></span><span class="line"><span class="cl">sub   ed25519 2023-07-01 [S] [expires: 2025-06-30]
</span></span></code></pre></div><p>The highlighted line shows the WKD hash value.</p>
<p>We&rsquo;ll export they key again, this time with different parameters than before.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-export</span> <span class="p">-</span><span class="n">-output</span> <span class="s2">&#34;5pw7sz7ipunrs4qpkrrzt131q98dwoen@example.com&#34;</span> <span class="n">665CECFAD715DD26</span><span class="p">!</span>
</span></span></code></pre></div><p>This exports the public key in binary format with the name <code>5pw7sz7ipunrs4qpkrrzt131q98dwoen@example.com</code>.</p>
<p>We can put this file in our website so that it&rsquo;s final url will be, <code>https://www.example.com/.well-known/openpgpkey/hu/5pw7sz7ipunrs4qpkrrzt131q98dwoen@example.com</code></p>
<p>Obviously every website is different, so I can&rsquo;t tell you best how to accomplish that, but once the file is available at that url, gpg will be able to import it.</p>
<h3 id="public-repo">Public Repo</h3>
<p>WKD is great if you own the domain of your email.  If you use a service like Gmail, or one of your identities is from your employer&rsquo;s domain, WKD won&rsquo;t really be an option for you.</p>
<p>In my opinion, the easiest way to host something without owning your own domain, is with a public GitHub repo.  Export your key using <code>gpg --export --armor</code>, push it to a public GitHub repo.  You can socialize the information on channels you control, Twitter, GitHub profile, your email signature.</p>
<p>You would want to socialize the <a href="https://docs.github.com/en/repositories/working-with-files/using-files/viewing-a-file#viewing-or-copying-the-raw-file-content" target="_blank" rel="noopener noreffer ">raw content</a> url. If people navigate to the URL or use a script to download your key, this will ensure they get the pure contents of the key and not GitHub&rsquo;s hosted UI displaying the file.</p>
<h2 id="importing-others-keys">Importing Others&rsquo; Keys</h2>
<p>The process of importing someone&rsquo;s key depends on how they published it.  The best way to determine that is to see if they have documented the information in some public forum.  Is it listed on their GitHub profile, social media platform, etc.?  If so, follow those instructions and contact the person for assistance.  Let&rsquo;s walk through some common options.</p>
<h3 id="keyservers">Keyservers</h3>
<p>If the key is on a keyserver, it&rsquo;s best to use the key&rsquo;s fingerprint as that will guarantee you import the correct key.  You <em>can</em> search by name and/or email address with the <code>--search-keys</code> <a href="https://www.gnupg.org/documentation/manuals/gnupg/Operational-GPG-Commands.html#index-refresh_002dkeys" target="_blank" rel="noopener noreffer ">command</a>.  However, there is no validation of the identifying information.</p>
<p>Run this command and tell me which key is the right one for the sitting President of the United States? (Hint: None of them.)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-search-keys</span> <span class="n">president</span><span class="nv">@whitehouse</span><span class="p">.</span><span class="py">gov</span>
</span></span></code></pre></div><p>How do we get the fingerprint?  If the person hasn&rsquo;t documented their key information, you can find the key&rsquo;s fingerprint in the git commit log.  Find a commit that&rsquo;s been signed by the person&rsquo;s key.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">git</span> <span class="n">log</span> <span class="p">-</span><span class="n">-show-signature</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">commit &lt;commit hash&gt; (HEAD -&gt; develop, origin/develop, origin/HEAD)
</span></span><span class="line"><span class="cl">gpg: Signature made 6/27/2023 5:07:56 PM Eastern Daylight Time^M
</span></span><span class="line hl"><span class="cl">gpg:                using EDDSA key 3DF0BC8B128E675BF40A7701209715C6642286C4^M
</span></span><span class="line"><span class="cl">gpg: Can&#39;t check signature: No public key^M
</span></span><span class="line"><span class="cl">Author: Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">Date:   Tue Jun 27 20:59:55 2023 +0200
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Important commit message here
</span></span></code></pre></div><p>Search for they key by that fingerprint.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-search-keys</span> <span class="n">3DF0BC8B128E675BF40A7701209715C6642286C4</span>
</span></span></code></pre></div><p>If the key is found, we&rsquo;ll see this message.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg: data source: https://162.213.33.8:443
</span></span><span class="line"><span class="cl">(1)     Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">          263 bit EDDSA key 3DF0BC8B128E675B, created: 2023-07-01
</span></span><span class="line"><span class="cl">Keys 1-1 of 1 for &#34;3DF0BC8B128E675B&#34;.  Enter number(s), N)ext, or Q)uit &gt;
</span></span></code></pre></div><p>If you type <kbd>1</kbd> it will import the key.  It may attempt to list more keys, if so, type <kbd>Q</kbd> to quit.</p>
<p>This is the message we&rsquo;ll get if the key is not found.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg: data source: https://162.213.33.8:443
</span></span><span class="line"><span class="cl">gpg: key &#34;3DF0BC8B128E675BF40A7701209715C6642286C4&#34; not found on keyserver
</span></span><span class="line"><span class="cl">gpg: keyserver search failed: Not found
</span></span></code></pre></div><p>We could also use the <a href="https://www.gnupg.org/gph/en/manual/r747.html" target="_blank" rel="noopener noreffer ">&ndash;recv-keys</a> command to download the key from the server.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-recv-keys</span> <span class="n">3DF0BC8B128E675BF40A7701209715C6642286C4</span>
</span></span></code></pre></div><p>You&rsquo;ll likely get one of these responses:</p>
<p>Key found, importing</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg: key 3DF0BC8B128E675B: public key &#34;Brad Knowles &lt;personal@example.com&gt;&#34; imported
</span></span><span class="line"><span class="cl">gpg: Total number processed: 1
</span></span><span class="line"><span class="cl">gpg:               imported: 1
</span></span></code></pre></div><p>or key not found</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg: keyserver receive failed: No data
</span></span></code></pre></div><p>If the key is found, the next time you run <code>git log --show-signature</code> you should see that &ldquo;Good signature&rdquo; line.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">commit 1065155f5b2803883e2610b584c61ecee5933c93 (HEAD -&gt; main, origin/main)
</span></span><span class="line"><span class="cl">gpg: Signature made 7/2/2023 6:48:45 PM Eastern Daylight Time^M
</span></span><span class="line"><span class="cl">gpg:                using EDDSA key 2AA42721506A9A9896E6DB17665CECFAD715DD26^M
</span></span><span class="line hl"><span class="cl">gpg: Good signature from &#34;Brad Knowles &lt;personal@example.com&gt;&#34; [ultimate]^M
</span></span><span class="line"><span class="cl">Primary key fingerprint: 3DF0 BC8B 128E 675B F40A  7701 2097 15C6 6422 86C4^M
</span></span><span class="line"><span class="cl">     Subkey fingerprint: 2AA4 2721 506A 9A98 96E6  DB17 665C ECFA D715 DD26^M
</span></span><span class="line"><span class="cl">Author: Brad Knowles &lt;personal@example.com&gt;
</span></span><span class="line"><span class="cl">Date:   Sun Jul 2 18:48:45 2023 -0400
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Initial commit
</span></span></code></pre></div><h3 id="web-key-directory-1">Web Key Directory</h3>
<p>If the user has chosen not to use a keyserver, you can have <code>gpg</code> use the Web Key Directory protocol to find the key from the domain part of the email address associated with the key.</p>
<p><code>Gpg</code> has this functionality built it, but it uses a different command</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-locate-external-key</span> <span class="s2">&#34;personal@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c"># This exact command will not work as there are no keys @example.com</span>
</span></span></code></pre></div><p>If the key was at the location we discussed in the earlier section on <a href="#web-key-directory" rel="">Web Key Directory</a>, <code>gpg</code> will import it automatically.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg: key 3DF0BC8B128E675B: public key &#34;Brad Knowles &lt;personal@example.com&gt;&#34; imported
</span></span><span class="line"><span class="cl">gpg: Total number processed: 1
</span></span><span class="line"><span class="cl">gpg:               imported: 1
</span></span><span class="line"><span class="cl"># ... key info ...
</span></span></code></pre></div><h3 id="public-repo-1">Public Repo</h3>
<p>If the user has decided to skip the keyserver and WKD, the process is a bit more involved.  First you must find their key.  The user should make this information easily accessible to the general public.  Social media is a common avenue, for example a pinned Tweet.  Email signatures, blog footers, there&rsquo;s even such a thing as an in-person <a href="https://en.wikipedia.org/wiki/Key_signing_party" target="_blank" rel="noopener noreffer ">key signing party</a> (nerds know how to have a good time, don&rsquo;t we ð); all of these are ways for a person to communicate they location of their key.  If all else fails, reach out to the person over a communication channel you are sure they own and ask where to find their key.</p>
<p>Our friend has told us their key is at <code>https://public-key.example.com/3DF0BC8B128E675B.asc</code>.  We need to download the key to the computer then import into the keyring.</p>
<p>One common way to get the file is to use <code>cURL</code>.  You could download the file from the link manually as well, there <em>shouldn&rsquo;t</em> be any problems with character encodings etc.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">curl </span><span class="p">-</span><span class="n">-location</span> <span class="s2">&#34;https://public-key.example.com/3DF0BC8B128E675B.asc&#34;</span> <span class="p">-</span><span class="n">-remote-name</span> <span class="p">-</span><span class="n">-remote-header-name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># This is the same command, just using the single parameter names</span>
</span></span><span class="line"><span class="cl"><span class="nb">curl </span><span class="n">-LOJ</span> <span class="s2">&#34;https://public-key.example.com/3DF0BC8B128E675B.asc&#34;</span>
</span></span></code></pre></div><p>This command downloads the file, following any redirects <code>--location (-L)</code> with a name specified from the server-specified <code>Content-Disposition</code> filename instead of extracting a filename from the URL, <code>--remote-name (-O)</code> <code>--remote-header-name (-J)</code>.</p>
<p>You can also use pure PowerShell, but it&rsquo;s more verbose.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$keyFileName</span> <span class="p">=</span> <span class="nb">Invoke-WebRequest</span> <span class="n">-Uri</span> <span class="nv">$url</span> <span class="n">-Method</span> <span class="n">HEAD</span> <span class="p">|</span> <span class="p">%{</span><span class="nv">$_</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="s2">&#34;Content-Disposition&#34;</span><span class="p">].</span><span class="py">Split</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">)[</span><span class="mf">1</span><span class="p">].</span><span class="py">Trim</span><span class="p">(</span><span class="s1">&#39;&#34;&#39;</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl"><span class="nb">Invoke-WebRequest</span> <span class="n">-Uri</span> <span class="nv">$url</span> <span class="n">-OutFile</span> <span class="nv">$keyFileName</span>
</span></span></code></pre></div><p>Now that you have the key, simply import it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="n">gpg</span> <span class="p">-</span><span class="n">-import</span> <span class="p">.\</span><span class="n">3DF0BC8B128E675B</span><span class="p">.</span><span class="py">asc</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">gpg: key 3DF0BC8B128E675B: public key &#34;Brad Knowles &lt;personal@example.com&gt;&#34; imported
</span></span><span class="line"><span class="cl">gpg: Total number processed: 1
</span></span><span class="line"><span class="cl">gpg:               imported: 1
</span></span></code></pre></div><h2 id="summary">Summary</h2>
<p>This has been a long post, but we&rsquo;ve accomplished quite a bit.  We learned just how easy it is to fake Git commit author information.  We&rsquo;ve discussed the basics of public key cryptography, the foundation of commit signing; established a key creation environment; created signing keys, configured <code>git</code> to use those keys to sign commits, uploaded the public key to GitHub for verification and publicly published our keys.</p>
<p>There are many more commands and options to <code>gpg</code> but we&rsquo;ve gotten the basics down.</p>
<p>Go forth and sign all the commits!</p>
<h2 id="additional-reading">Additional Reading</h2>
<ul>
<li>
<p><a href="https://alexcabal.com/creating-the-perfect-gpg-keypair" target="_blank" rel="noopener noreffer ">Creating the perfect GPG keypair</a> - This is the blog that started it all for me and is referenced in many other places. It was created in 2013 however, <code>gpg</code> has much better defaults and there are some easier ways to perform some of the actions; hence this article!</p>
</li>
<li>
<p><a href="https://www.ipswitch.com/blog/the-difference-between-pgp-openpgp-and-gnupg-encryption" target="_blank" rel="noopener noreffer ">The Difference Between PGP, OpenPGP, and GnuPG Encryption</a></p>
</li>
<li>
<p><a href="https://www.openpgp.org/about/" target="_blank" rel="noopener noreffer ">About OpenPGP</a></p>
</li>
<li>
<p><a href="https://datatracker.ietf.org/doc/html/rfc4880" target="_blank" rel="noopener noreffer ">OpenPGP Message Format RFC 4880</a></p>
</li>
<li>
<p><a href="https://blog.mailfence.com/openpgp-digital-signature-best-practices/" target="_blank" rel="noopener noreffer ">OpenPGP digital signature best practices</a></p>
</li>
<li>
<p><a href="https://security.stackexchange.com/a/29858" target="_blank" rel="noopener noreffer ">How Many OpenPGP Keys Should I Make?</a></p>
</li>
</ul>
<h2 id="references">References</h2>
<p>The post <a rel="nofollow" href="https://bradknowles.com/blog/claiming-your-git-identity-with-commit-signatures/">Claiming Your Git Identity with Commit Signatures</a> first appeared on <a rel="nofollow" href="https://bradknowles.com/">Brad Knowles&#39; Blog</a>.</p>

<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>GnuPG is a complete and free implementation of the OpenPGP standard as defined by RFC4880 (also known as PGP). GnuPG allows you to encrypt and sign your data and communications; it features a versatile key management system, along with access modules for all kinds of public key directories. GnuPG, also known as GPG, is a command line tool with features for easy integration with other applications.</p>
<p>&ndash; <a href="https://www.gnupg.org/" target="_blank" rel="noopener noreffer ">The GNU Privacy Guard</a>, accessed 05 July 2023&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Nadeem, M. Salman. &ldquo;Digitally Signed Emails. What Is It And How Do Digital Signatures Work?&rdquo; Mailfence Blog, 9 Feb. 2023, <a href="https://blog.mailfence.com/how-do-digital-signatures-work/" target="_blank" rel="noopener noreffer ">https://blog.mailfence.com/how-do-digital-signatures-work/</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Erat, Jens. &ldquo;Answer to &lsquo;How Many OpenPGP Keys Should I Make?&rsquo;â Information Security Stack Exchange, 29 Jan. 2013, <a href="https://security.stackexchange.com/a/29858" target="_blank" rel="noopener noreffer ">https://security.stackexchange.com/a/29858</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>&ldquo;Generating a New GPG Key.&rdquo; GitHub Docs, <a href="https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key#supported-gpg-key-algorithms" target="_blank" rel="noopener noreffer ">https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key#supported-gpg-key-algorithms</a>. Accessed 29 June 2023.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Kontsevoy, Ev. &ldquo;Comparing SSH Keys - RSA, DSA, ECDSA, or EdDSA?â Teleport Blog, 26 Aug. 2020, <a href="https://goteleport.com/blog/comparing-ssh-keys/" target="_blank" rel="noopener noreffer ">https://goteleport.com/blog/comparing-ssh-keys/</a>.&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Wikipedia contributors. &ldquo;Curve25519.â Wikipedia, The Free Encyclopedia, 26 June 2023. Wikipedia, The Free Encyclopedia, <a href="https://en.wikipedia.org/w/index.php?title=Curve25519&amp;oldid=1161997981" target="_blank" rel="noopener noreffer ">https://en.wikipedia.org/w/index.php?title=Curve25519&oldid=1161997981</a>.&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Asfour, Omar. âECDSA vs ECDH vs Ed25519 vs Curve25519.â Information Security Stack Exchange, 10 May 2023, <a href="https://security.stackexchange.com/q/50878" target="_blank" rel="noopener noreffer ">https://security.stackexchange.com/q/50878</a>.&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8">
<p>Earlier I said I was using the <code>EdDSA</code> key algorithm, but above you&rsquo;ll see the key is created as <code>ed25519</code>. I believe these are the same thing.</p>
<p>Nakov, Svetlin. &ldquo;EDDSA and ED25519.&rdquo; Contributors Milen Stefanov and Marina Shideroff, EdDSA and Ed25519 - Practical Cryptography for Developers, 23 Nov. 2018, <a href="https://cryptobook.nakov.com/digital-signatures/eddsa-and-ed25519" target="_blank" rel="noopener noreffer ">https://cryptobook.nakov.com/digital-signatures/eddsa-and-ed25519</a>.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content><category scheme="https://bradknowles.com/tags/git" term="git" label="git"/><category scheme="https://bradknowles.com/tags/gpg" term="gpg" label="gpg"/><category scheme="https://bradknowles.com/tags/developer-tools" term="developer-tools" label="developer tools"/></entry></feed>